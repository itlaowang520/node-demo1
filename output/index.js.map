{"version":3,"sources":["../src/index.js"],"names":["port","app","Koa","process","on","err","logger","error","use","origin","allowMethods","allowHeaders","context","next","info","method","href","headers","token","stack","status","body","errcode","code","result","message","jsonLimit","enableTypes","router","routes","allowedMethods","undefined","set","JSON","stringify","databaseConfig","then","startServer","catch","listen"],"mappings":"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","sourcesContent":["import Koa from 'koa';\nimport router from './routers';\nimport { initDatabase } from './models';\nimport bodyParser from 'koa-bodyparser';\nimport databaseConfig from './models/config';\nimport cors from 'koa2-cors';\nimport logger from './utils/logger';\n\nconst port = 3009;\nconst app = new Koa();\n\nprocess.on('unhandledRejection', (err) => {\n    logger.error(err);\n});\n\napp.use(cors({\n    origin: '*',\n    allowMethods: ['GET', 'POST', 'DELETE', 'PUT', 'OPTIONS'],\n    allowHeaders: ['Content-Type', 'Authorization', 'Accept', 'token', 'X-Requested-With']\n}));\napp.use((context, next) => {\n    logger.info(`${context.method} ${context.href} ${context.headers['content-type']} ${context.headers['user-agent']} ${context.headers.token || ''}`);\n    return next();\n});\napp.use(async(context, next) => {\n    try {\n        await next();\n    } catch (error) {\n        // 错误处理\n        logger.error(`${error.stack}`);\n        context.status = 200;\n        context.body = {\n            errcode: error.code || -1,\n            result: {\n                message: error.message\n            }\n        };\n    }\n});\n\n// 解析 Request Body\napp.use(bodyParser({\n    jsonLimit: '50mb',\n    enableTypes: ['json', 'form', 'multipart']\n}));\n\n// 载入 router\napp.use(router.routes());\napp.use(router.allowedMethods());\n\n// 返回响应头 'Content-Type' 固定为 'application/json'\napp.use((context, next) => {\n    if (context.body) {\n        if (context.body.errcode === undefined) {\n            context.body = {\n                errcode: 0,\n                result: context.body\n            };\n        }\n        // 返回数据为 json 格式\n        context.set('Content-Type', 'application/json');\n        context.body = JSON.stringify(context.body);\n    }\n    return next();\n});\n\n// 初始化数据库\ninitDatabase(databaseConfig)\n    .then(startServer)\n    .catch((err) => {\n        logger.error(err);\n    });\n\nfunction startServer() {\n    app.listen(port, () => {\n        logger.info(`server listening on ${port}...`);\n    });\n}\n"],"file":"index.js"}