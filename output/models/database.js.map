{"version":3,"sources":["../../src/models/database.js"],"names":["Database","host","port","dbName","db","undefined","Promise","resolve","url","MongoClient","connect","useNewUrlParser","client"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEqBA,Q;AACjB,0BAAoC;AAAA,QAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,QAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,QAAVC,MAAU,QAAVA,MAAU;AAAA;AAChC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUC,SAAV;AACH;;;;;;;;;;;qBAGO,KAAKD,E;;;;;iDACEE,OAAO,CAACC,OAAR,CAAgB,KAAKH,EAArB,C;;;AAELI,gBAAAA,G,aAAS,KAAKP,I,cAAQ,KAAKC,I;;;uBAERO,qBAAYC,OAAZ,CAAoBF,GAApB,EAAyB;AAAEG,kBAAAA,eAAe,EAAE;AAAnB,iBAAzB,C;;;AAAfC,gBAAAA,M;AACN,qBAAKR,EAAL,GAAUQ,MAAM,CAACR,EAAP,CAAU,KAAKD,MAAf,CAAV;iDACO,KAAKC,E;;;;;;;;;;;;;;;;;;;;;;;4BAMZ;AACJ,aAAO,KAAKA,EAAZ;AACH","sourcesContent":["import { MongoClient } from 'mongodb';\n\nexport default class Database {\n    constructor({ host, port, dbName }) {\n        this.host = host;\n        this.port = port;\n        this.dbName = dbName;\n        this.db = undefined;\n    }\n\n    async initDatabase() {\n        if (this.db) {\n            return Promise.resolve(this.db);\n        }\n        const url = `${this.host}:${this.port}`;\n        try {\n            const client = await MongoClient.connect(url, { useNewUrlParser: true });\n            this.db = client.db(this.dbName);\n            return this.db;\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    getDB() {\n        return this.db;\n    }\n}\n"],"file":"database.js"}